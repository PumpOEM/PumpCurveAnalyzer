<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Motor Performance Analyzer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .data-table th, .data-table td {
            padding: 0.75rem;
            border: 1px solid #e5e7eb;
            text-align: center;
        }
        .data-table th {
            background-color: #f9fafb;
        }
        .data-table td[contenteditable="true"]:focus {
            outline: 2px solid #4f46e5;
            background-color: #eff6ff;
        }
        .result-cell {
            background-color: #f3f4f6;
            font-weight: 600;
            color: #1e40af;
        }
    </style>
</head>
<body class="bg-gray-100">

    <div class="container mx-auto p-4 md:p-8 max-w-4xl">
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Motor Performance Analyzer</h1>
            <p class="mt-2 text-md text-gray-600">Calculate motor output HP using datasheet performance curves.</p>
        </header>

        <div class="bg-white rounded-xl shadow-lg p-6 md:p-8 space-y-8">
            
            <!-- Motor Datasheet Input -->
            <div>
                <h2 class="text-xl font-semibold text-gray-800 border-b pb-3 mb-4">Motor Datasheet Performance</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                     <div>
                        <label for="datasheet-voltage" class="block text-sm font-medium text-gray-700">Rated Voltage (V)</label>
                        <input type="number" id="datasheet-voltage" value="460" class="param-input mt-1 w-full p-2 border rounded-md shadow-sm">
                    </div>
                </div>
                 <p class="text-xs text-gray-500 mb-2">Enter data here. HP for other loads will auto-calculate after entering the 100% load value.</p>
                <div class="overflow-x-auto">
                    <table class="w-full data-table text-sm">
                        <thead>
                            <tr>
                                <th>Load (%)</th>
                                <th>Output HP</th>
                                <th>Amps (A)</th>
                                <th>Power Factor</th>
                                <th>Efficiency (%)</th>
                            </tr>
                        </thead>
                        <tbody id="datasheet-body">
                            <!-- Rows are generated by JS -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Field Readings & Results -->
            <div>
                <h2 class="text-xl font-semibold text-gray-800 border-b pb-3 mb-4">Field Measurements & Calculated HP</h2>
                 <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                    <div>
                        <label for="measured-voltage" class="block text-sm font-medium text-gray-700">Measured Voltage (V)</label>
                        <input type="number" id="measured-voltage" value="480" class="param-input mt-1 w-full p-2 border rounded-md shadow-sm">
                    </div>
                </div>
                 <p class="text-xs text-gray-500 mb-2">Enter your measured amp readings. Leave "Measured PF" blank to use the datasheet value.</p>
                <div class="overflow-x-auto">
                     <table class="w-full data-table text-sm">
                        <thead>
                            <tr>
                                <th>Field Amps (A)</th>
                                <th>Measured PF at Motor</th>
                                <th>Calculated Output (HP)</th>
                            </tr>
                        </thead>
                        <tbody id="results-body">
                           <!-- Rows are generated by JS -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const datasheetBody = document.getElementById('datasheet-body');
            const resultsBody = document.getElementById('results-body');
            const datasheetVoltageInput = document.getElementById('datasheet-voltage');
            const measuredVoltageInput = document.getElementById('measured-voltage');

            function initializeTables() {
                // Initialize Datasheet Table
                datasheetBody.innerHTML = '';
                const datasheetInitialData = [
                    [100, 450, 70, 0.755, 88.5],
                    [75, 337.5, 55, 0.69, 87.0],
                    [50, 225, 42, 0.58, 84.0],
                    ['', '', '', '', ''],
                    ['', '', '', '', '']
                ];
                datasheetInitialData.forEach(rowData => {
                    const row = datasheetBody.insertRow();
                    for (let i = 0; i < 5; i++) {
                        const cell = row.insertCell();
                        cell.contentEditable = true;
                        cell.textContent = rowData[i];
                    }
                });

                // Initialize Results Table
                resultsBody.innerHTML = '';
                 for (let i = 0; i < 10; i++) {
                    const row = resultsBody.insertRow();
                    const ampsCell = row.insertCell();
                    const pfCell = row.insertCell();
                    const hpCell = row.insertCell();
                    ampsCell.contentEditable = true;
                    pfCell.contentEditable = true;
                    hpCell.classList.add('result-cell');
                }
            }

            function autoCompleteHP(editedCell) {
                let fullLoadHPRow = null;
                // Find the 100% load row
                for(const row of datasheetBody.rows) {
                    if (parseFloat(row.cells[0].textContent) === 100) {
                        fullLoadHPRow = row;
                        break;
                    }
                }
                if (!fullLoadHPRow) return; // Can't do anything without a 100% load reference

                const fullLoadHP = parseFloat(fullLoadHPRow.cells[1].textContent) || 0;
                
                // Only auto-calculate if the 100% HP cell or a load % cell was edited
                if (fullLoadHP > 0 && (editedCell.cellIndex === 1 && parseFloat(editedCell.parentNode.cells[0].textContent) === 100 || editedCell.cellIndex === 0)) {
                    for(const row of datasheetBody.rows) {
                         // Don't overwrite the 100% row itself
                        if (parseFloat(row.cells[0].textContent) !== 100) {
                            const loadPercent = parseFloat(row.cells[0].textContent) || 0;
                            if (loadPercent > 0) {
                                row.cells[1].textContent = (fullLoadHP * (loadPercent / 100)).toFixed(1);
                            }
                        }
                    }
                }
            }
            
            function calculateHP() {
                // 1. Get System Parameters
                const datasheetVoltage = parseFloat(datasheetVoltageInput.value) || 0;
                const measuredVoltage = parseFloat(measuredVoltageInput.value) || 0;


                // 2. Parse and sort datasheet for efficiency and PF lookup
                const datasheetData = [];
                for(const row of datasheetBody.rows) {
                    const cells = Array.from(row.cells).map(c => parseFloat(c.textContent) || 0);
                    const [load, hp, amps, pf, eff] = cells;
                    if (amps > 0 && (eff > 0 || pf > 0)) {
                        datasheetData.push({ amps, pf, eff });
                    }
                }
                datasheetData.sort((a, b) => a.amps - b.amps);

                // 3. Process each field reading
                for(const row of resultsBody.rows) {
                    const fieldAmps = parseFloat(row.cells[0].textContent) || 0;
                    const measuredPF = parseFloat(row.cells[1].textContent) || 0;
                    const hpCell = row.cells[2];

                    if (fieldAmps > 0 && datasheetData.length >= 2 && datasheetVoltage > 0 && measuredVoltage > 0) {
                        
                        // Adjust field amps to what they would be at the datasheet voltage for accurate lookup
                        const adjustedAmps = fieldAmps * (measuredVoltage / datasheetVoltage);

                        // Find bracketing points in datasheet using adjusted amps
                        let lowerPoint = datasheetData[0];
                        let upperPoint = datasheetData[datasheetData.length - 1];

                        for(let i = 0; i < datasheetData.length - 1; i++) {
                            if (adjustedAmps >= datasheetData[i].amps && adjustedAmps <= datasheetData[i+1].amps) {
                                lowerPoint = datasheetData[i];
                                upperPoint = datasheetData[i+1];
                                break;
                            }
                        }
                         if (adjustedAmps < lowerPoint.amps) upperPoint = lowerPoint;
                         if (adjustedAmps > upperPoint.amps) lowerPoint = upperPoint;

                        // Interpolate efficiency using adjusted amps
                        const interpolatedEff = interpolate(adjustedAmps, lowerPoint.amps, lowerPoint.eff, upperPoint.amps, upperPoint.eff);
                        
                        // Determine which PF to use
                        let powerFactorToUse;
                        if (measuredPF > 0) {
                            powerFactorToUse = measuredPF;
                        } else {
                            // If measured PF is blank, interpolate from datasheet using adjusted amps
                            powerFactorToUse = interpolate(adjustedAmps, lowerPoint.amps, lowerPoint.pf, upperPoint.amps, upperPoint.pf);
                        }
                        
                        // 4. Calculate HP using the standard formula for 3-phase power with ACTUAL measured values
                        // HP = (V_measured * I_field * PF_used * Eff_interp * 1.732) / 746
                        const calculatedHP = (measuredVoltage * fieldAmps * powerFactorToUse * (interpolatedEff / 100) * 1.732) / 746;
                        
                        hpCell.textContent = calculatedHP.toFixed(1);

                    } else {
                        hpCell.textContent = '';
                    }
                }
            }

            function interpolate(x, x0, y0, x1, y1) {
                if (x1 - x0 === 0) {
                    return y0; // Avoid division by zero, return one of the points
                }
                return y0 + (x - x0) * (y1 - y0) / (x1 - x0);
            }
            
            // --- Event Listeners ---
            datasheetVoltageInput.addEventListener('input', calculateHP);
            measuredVoltageInput.addEventListener('input', calculateHP);
            
            datasheetBody.addEventListener('input', (e) => {
                if(e.target.tagName === 'TD'){
                    autoCompleteHP(e.target);
                }
                calculateHP();
            });

            resultsBody.addEventListener('input', calculateHP);

            // --- Initial Load ---
            initializeTables();
            calculateHP();
        });
    </script>
</body>
</html>
